#
# This file is distributed under the MIT License. See LICENSE.md for details.
#

commands:
  #
  # Run revng's initial autoanalysis
  #
  - type: revng.analyzed-model
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
    suffix: .yml
    command: revng analyze revng-initial-auto-analysis "$INPUT" -o "$OUTPUT"

  #
  # Perform lifting
  #
  - type: revng.lifted
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.analyzed-model
    suffix: /
    command: revng artifact --resume "$OUTPUT" lift "$INPUT1" --model "$INPUT2" -o /dev/null

  #
  # Produce enforce-abi artifact from revng.lifted
  #
  - type: revng.enforce-abi
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.lifted
    suffix: /
    command: |-
      cp -Tar "$INPUT2" "$OUTPUT";
      revng artifact --resume "$OUTPUT" enforce-abi "$INPUT1" -o /dev/null;

  #
  # Produce hexdump artifact from revng.lifted
  #
  - type: revng.hexdump
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.lifted
    suffix: /
    command: |-
      cp -Tar "$INPUT2" "$OUTPUT";
      revng artifact --resume "$OUTPUT" hexdump "$INPUT1" -o /dev/null;

  #
  # Produce render-svg-call-graph artifact from revng.lifted
  #
  - type: revng.render-svg-call-graph
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.lifted
    suffix: /
    command: |-
      cp -Tar "$INPUT2" "$OUTPUT";
      revng artifact --resume "$OUTPUT" render-svg-call-graph "$INPUT1" -o /dev/null;

  #
  # Produce render-svg-call-graph-slice artifact from revng.lifted
  #
  - type: revng.render-svg-call-graph-slice
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.lifted
    suffix: /
    command: |-
      cp -Tar "$INPUT2" "$OUTPUT";
      revng artifact --resume "$OUTPUT" render-svg-call-graph-slice "$INPUT1" -o /dev/null;

  #
  # Produce disassemble artifact from revng.lifted
  #
  - type: revng.disassemble
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.lifted
    suffix: /
    command: |-
      cp -Tar "$INPUT2" "$OUTPUT";
      revng artifact --resume "$OUTPUT" disassemble "$INPUT1" -o /dev/null;

  #
  # Produce render-svg-cfg artifact from revng.lifted
  #
  - type: revng.render-svg-cfg
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.lifted
    suffix: /
    command: |-
      cp -Tar "$INPUT2" "$OUTPUT";
      revng artifact --resume "$OUTPUT" render-svg-cfg "$INPUT1" -o /dev/null;

  #
  # Produce a tarball of decompile files from revng.analyzed-model
  # Also compare the members of the produced tar file and the input model,
  # both should contain the same members (except the extension).
  #
  - type: revng.legacy.decompiled-c-tar
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.analyzed-model
    suffix: /
    command: |-
      revng artifact
        --model "$INPUT2"
        --resume "$OUTPUT"
        decompile "$INPUT1" > "$OUTPUT/decompiled.tar.gz";

      diff -u <(yq -r '.Functions[].Entry' "$INPUT2" | sort)
              <(tar -tf "$OUTPUT/decompiled.tar.gz" | sed 's|\.c\.ptml$$||' | sort);

  #
  # Produce legacy single decompiled file and headers from revng.analyzed-model
  #
  - type: revng.legacy.decompiled-c
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.analyzed-model
    suffix: /
    command: |-
      WORKDIR="$OUTPUT/check-decompiled-c";
      mkdir -p "$$WORKDIR";

      revng artifact
        --model "$INPUT2"
        --resume "$OUTPUT"
        decompile-to-single-file
        "$INPUT1"
        --naming-collisions-report="$$WORKDIR/name-collisions.txt"
      | revng ptml > "$$WORKDIR/decompiled.c";

      revng artifact --resume "$OUTPUT" emit-model-header "$INPUT1" | revng ptml > "$$WORKDIR/types-and-globals.h";
      revng artifact --resume "$OUTPUT" emit-helpers-header "$INPUT1" | revng ptml > "$$WORKDIR/helpers.h";
      revng check-decompiled-c "$$WORKDIR/decompiled.c" -I"$$WORKDIR" -DLEGACY_BACKEND -m${POINTER_SIZE};

  #
  # Produce the prepare-for-clift artifact, as a preliminary test for clift-based decompilation
  #
  - type: revng.decompiled-c
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.analyzed-model
    suffix: /
    command: |-
      revng artifact --model "$INPUT2" --resume "$OUTPUT" prepare-for-clift "$INPUT1" -o /dev/null
