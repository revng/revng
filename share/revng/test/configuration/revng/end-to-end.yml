#
# This file is distributed under the MIT License. See LICENSE.md for details.
#

commands:
  #
  # Run revng's initial autoanalysis
  #
  - type: revng.analyzed-model
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
    suffix: .yml
    command: revng analyze revng-initial-auto-analysis "$INPUT" -o "$OUTPUT"

  #
  # Perform lifting
  #
  - type: revng.lifted
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.analyzed-model
    suffix: /
    command: revng artifact --resume "$OUTPUT" lift "$INPUT1" --model "$INPUT2" -o /dev/null

  #
  # Produce enforce-abi artifact from revng.lifted
  #
  - type: revng.enforce-abi
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.lifted
    suffix: /
    command: |-
      cp -Tar "$INPUT2" "$OUTPUT";
      revng artifact --resume "$OUTPUT" enforce-abi "$INPUT1" -o /dev/null;

  #
  # Produce hexdump artifact from revng.lifted
  #
  - type: revng.hexdump
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.lifted
    suffix: /
    command: |-
      cp -Tar "$INPUT2" "$OUTPUT";
      revng artifact --resume "$OUTPUT" hexdump "$INPUT1" -o /dev/null;

  #
  # Produce render-svg-call-graph artifact from revng.lifted
  #
  - type: revng.render-svg-call-graph
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.lifted
    suffix: /
    command: |-
      cp -Tar "$INPUT2" "$OUTPUT";
      revng artifact --resume "$OUTPUT" render-svg-call-graph "$INPUT1" -o /dev/null;

  #
  # Produce render-svg-call-graph-slice artifact from revng.lifted
  #
  - type: revng.render-svg-call-graph-slice
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.lifted
    suffix: /
    command: |-
      cp -Tar "$INPUT2" "$OUTPUT";
      revng artifact --resume "$OUTPUT" render-svg-call-graph-slice "$INPUT1" -o /dev/null;

  #
  # Produce disassemble artifact from revng.lifted
  #
  - type: revng.disassemble
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.lifted
    suffix: /
    command: |-
      cp -Tar "$INPUT2" "$OUTPUT";
      revng artifact --resume "$OUTPUT" disassemble "$INPUT1" -o /dev/null;

  #
  # Produce render-svg-cfg artifact from revng.lifted
  #
  - type: revng.render-svg-cfg
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.lifted
    suffix: /
    command: |-
      cp -Tar "$INPUT2" "$OUTPUT";
      revng artifact --resume "$OUTPUT" render-svg-cfg "$INPUT1" -o /dev/null;

  #
  # Produce a tarball of decompile files from revng.analyzed-model
  # Also compare the members of the produced tar file and the input model,
  # both should contain the same members (except the extension).
  #
  - type: revng.legacy.decompiled-c-tar
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.analyzed-model
    suffix: /
    command: |-
      revng artifact
        --model "$INPUT2"
        --resume "$OUTPUT"
        decompile "$INPUT1" > "$OUTPUT/decompiled.tar.gz";

      diff -u <(yq -r '.Functions[].Entry' "$INPUT2" | sort)
              <(tar -tf "$OUTPUT/decompiled.tar.gz" | sed 's|\.c\.ptml$$||' | sort);

  #
  # Produce legacy single decompiled file and headers from revng.analyzed-model
  #
  - type: revng.legacy.decompiled-c
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.analyzed-model
    suffix: /
    command: |-
      ./emit-and-check-c decompile-to-single-file "$INPUT1" "$INPUT2" "$OUTPUT" "$POINTER_SIZE"

  #
  # Produce the emit-c artifact and check the resulting C code
  #
  - type: revng.emit-and-check-c
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.analyzed-model
    suffix: /
    command: |-
      ./emit-and-check-c emit-c-as-single-file "$INPUT1" "$INPUT2" "$OUTPUT" "$POINTER_SIZE"
    scripts:
      emit-and-check-c: |-
        #!/usr/bin/env bash

        set -euo pipefail

        ARTIFACT="$1"
        BINARY="$2"
        MODEL="$3"
        RESUME="$4"
        POINTER_SIZE="$5"

        OUTDIR="$RESUME/e2e-test-$ARTIFACT"
        mkdir -p "$OUTDIR"

        revng artifact \
          --model "$MODEL" \
          --resume "$RESUME" \
          emit-helpers-header \
          "$BINARY" \
        | revng ptml > "$OUTDIR/helpers.h"

        revng artifact \
          --model "$MODEL" \
          --resume "$RESUME" \
          emit-model-header \
          "$BINARY" \
        | revng ptml > "$OUTDIR/types-and-globals.h"

        revng artifact \
          --model "$MODEL" \
          --resume "$RESUME" \
          "$ARTIFACT" \
          "$BINARY" \
        | revng ptml > "$OUTDIR/decompiled.c"

        DEFINES=""
        if [ "$ARTIFACT" == "decompile-to-single-file" ]; then
          DEFINES="-DLEGACY_BACKEND"
        fi

        revng check-decompiled-c "$OUTDIR/decompiled.c" -I"$OUTDIR" -m"$POINTER_SIZE" $DEFINES \
          2> "$OUTDIR/check-decompiled-c.log"
