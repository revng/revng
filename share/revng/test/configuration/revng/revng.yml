#
# This file is distributed under the MIT License. See LICENSE.md for details.
#

commands:
  - type: revng.lifted
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
    suffix: .bc
    command: revng lift "$INPUT" "$OUTPUT"
  - type: revng.abi-enforced-for-decompilation
    from:
      - type: revng-qa.compiled
        filter: one-per-architecture
      - type: revng.lifted
    suffix: .bc
    command: |-
      MODEL="$$(temp)";
      TMP="$$(temp -d)";
      revng model dump "$INPUT2" -o "$$MODEL";
      revng analyze detect-abi "$INPUT1" --resume "$$TMP" -m "$$MODEL" -o /dev/null;
      revng artifact enforce-abi "$INPUT1" --resume "$$TMP" -o /dev/null;
      revng model inject "$$TMP"/context/model.yml "$$TMP"/enforce-abi/module.ll -o "$OUTPUT";
  - type: revng.test-python-model-serialization-roundtrip
    from:
      - type: revng.abi-enforced-for-decompilation
    command: |-
      revng model opt -Y -verify "$INPUT"
        | ./serialize-deserialize.py
        | revng model opt -Y -verify
        | revng model diff /dev/stdin "$INPUT" -o /dev/null
    scripts:
      serialize-deserialize.py: |-
        #!/usr/bin/env python3

        import sys
        import yaml

        from revng import model

        m = yaml.load(sys.stdin, Loader=model.YamlLoader)
        print(yaml.dump(m, Dumper=model.YamlDumper))
  - type: revng.test-typescript-model-serialization-roundtrip
    from:
      - type: revng.abi-enforced-for-decompilation
    command: |-
      revng model opt -Y -verify "$INPUT"
        | ./serialize-deserialize.js
        | revng model opt -Y -verify
        | revng model diff /dev/stdin "$INPUT" -o /dev/null
    scripts:
      serialize-deserialize.js: |-
        #!/usr/bin/env node

        //
        // This file is distributed under the MIT License. See LICENSE.md for details.
        //

        "use strict";

        const fs = require("fs");
        const process = require("process");
        const model = require("revng-model");

        const file = fs.readFileSync("/dev/stdin", "utf-8");
        const model_file = model.parseModel(file);
        fs.writeFileSync("/dev/stdout", model.dumpModel(model_file));
  - type: revng.test-daemon
    from:
      - type: revng-qa.compiled
        filter: example-executable-1 and with-debug-info
    command: |-
      TMP="$$(temp)";
      if ! python3 -m pytest "${SOURCES_ROOT}/share/revng/test/tests/daemon/test.py" --binary "$INPUT" >& "$$TMP"; then
        cat "$$TMP";
        exit 1;
      fi;
  - type: revng.test-daemon-all-artifacts
    from:
      - type: revng-qa.compiled
        filter: example-executable-1 and with-debug-info
    command: |-
      TMP="$$(temp)";
      if ! revng graphql --analyses-list=revng-initial-auto-analysis --produce-artifacts --filter-artifacts=revng "$INPUT" &> "$$TMP"; then
        cat "$$TMP";
        exit 1;
      fi;
  - type: revng.test-s3-storage
    from:
      - type: revng-qa.compiled
        filter: example-executable-1 and with-debug-info
    command: |-
      "${SOURCES_ROOT}/share/revng/test/tests/storage.sh" "$INPUT" "$$(temp -d)"
  - type: revng.test-model-diff
    from:
      - type: revng-qa.compiled
        filter: example-executable-1 and with-debug-info
      - type: revng-qa.compiled
        filter: example-executable-2 and with-debug-info
    command: |-
      revng model import binary "$INPUT1" > input1.yml;
      revng model import binary "$INPUT2" > input2.yml;
      ( revng model diff input1.yml input2.yml || true ) | revng model apply input1.yml | diff -u - input2.yml
