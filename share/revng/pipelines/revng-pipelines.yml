#
# This file is distributed under the MIT License. See LICENSE.md for details.
#

Component: revng
Containers:
  - Name: hex.dump
    Type: hex-dump
  - Name: cross-relations.yml
    Type: binary-cross-relations
    Role: cross-relations
  - Name: module.bc.zstd
    Type: llvm-container
  - Name: input
    Type: binary
  - Name: object.o
    Type: object
  - Name: output
    Type: translated
  - Name: assembly-internal.yml.tar.gz
    Type: function-assembly-internal
  - Name: assembly.ptml.tar.gz
    Type: function-assembly-ptml
  - Name: call-graph.svg.yml
    Type: call-graph-svg
  - Name: call-graph-slice.svg.tar.gz
    Type: call-graph-slice-svg
  - Name: cfg.svg.tar.gz
    Type: function-control-flow-graph-svg
  - Name: cfg.yml.tar.gz
    Type: cfg
  - Name: types-and-globals.h
    Type: model-header
  - Name: helpers.h
    Type: helpers-header
  - Name: decompiled.c
    Type: decompiled-c-code
  - Name: decompiled.tar.gz
    Type: decompile
  - Name: recompilable-archive.tar.gz
    Type: recompilable-archive
  - Name: module.mlir
    Type: mlir-module
  - Name: model-type-definitions.tar.gz
    Type: model-type-definitions
Branches:
  - Steps:
      - Name: initial
        Analyses:
          - Name: apply-diff
            Type: apply-diff
            UsedContainers: []
            Docs: |-
              Apply a diff to the model.
          - Name: verify-diff
            Type: verify-diff
            UsedContainers: []
            Docs: |-
              Verifies if a diff for the model would apply correctly.
          - Name: set-global
            Type: set-global
            UsedContainers: []
            Docs: |-
              Replace the model with a new one.
          - Name: verify-global
            Type: verify-global
            UsedContainers: []
            Docs: |-
              Verify if the given model is valid.
          - Name: import-binary
            Type: import-binary
            UsedContainers: [input]
            Docs: |-
              This analysis inspects the input binary and, if its format is
              among the supported ones, imports all the available information
              in the model.
              If debug info are available, they are imported as well.

              In particular, from the binary image we import `Segment`s, the
              `EntryPoint` and, if symbols are available, `Function` `Entry` and
              names.
              We currently support ELF, PE/COFF and Mach-O.

              From debug information, all the data structures and function
              prototypes are imported.
              We currently support DWARF and CodeView (`.pdb`) debug info.
          - Name: import-well-known-models
            Type: import-well-known-models
            UsedContainers: []
            Docs: |-
              Import the prototype of certain well-known functions from the C
              standard library.
          - Name: convert-functions-to-cabi
            Type: convert-functions-to-cabi
            UsedContainers: []
            Docs: |-
              Convert as many `RawFunctionType`s as possible to
              `CABIFunctionType`s, using the requested ABI.
      - Name: lift
        Pipes:
          - Type: lift
            UsedContainers: [input, module.bc.zstd]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes: [globaldce]
        Artifacts:
          Container: module.bc.zstd
          Kind: root
          SingleTargetFilename: module_lifted.ll
          Docs: |-
            The `root` function produced by the lifting phase.
            It's a single large function containing all of the executable code
            identified in the binary.
        Analyses:
          - Name: detect-abi
            Type: detect-abi
            UsedContainers: [module.bc.zstd]
            Docs: |-
              This analysis creates new functions from targets of function calls
              and from code addresses found in the code or in memory that would
              otherwise be unreachable.

              Additionally, the analysis builds, for each function lacking a
              prototype, a `RawFunctionType` by automatically identifying the
              list of arguments passed through registers and the list of return
              values.

              This analysis doesn't handle stack arguments.
      - Name: isolate
        Pipes:
          - Type: collect-cfg
            UsedContainers: [module.bc.zstd, cfg.yml.tar.gz]
          - Type: isolate
            UsedContainers: [cfg.yml.tar.gz, module.bc.zstd]
          - Type: attach-debug-info-to-isolated
            UsedContainers: [cfg.yml.tar.gz, module.bc.zstd]
          - Type: process-call-graph
            UsedContainers: [cfg.yml.tar.gz, cross-relations.yml]
        Artifacts:
          Container: module.bc.zstd
          Kind: isolated
          SingleTargetFilename: module_isolated.ll
          Docs: |-
            This artifact contains an LLVM function for each function in the
            input program.
            The functions still employ global variables (CSVs) to pass and
            return data.
            Therefore, they lack arguments and return values.
      - Name: enforce-abi
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - drop-root
          - Type: enforce-abi
            UsedContainers: [cfg.yml.tar.gz, module.bc.zstd]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - strip-debug-info-from-helpers
              # Note: we're running promote-csvs twice: it is important to run
              #       it before inline-helpers so that mem2reg can constant
              #       propagate helper arguments that are constant. This enables
              #       us to inline less code, in particular for helpers such as
              #       `cc_compute_c` and `cc_compute_all`.
              - promote-csvs
              - mem2reg
              - inline-helpers
          - Type: attach-debug-info-to-abi-enforced
            UsedContainers: [cfg.yml.tar.gz, module.bc.zstd]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - promote-csvs
              - remove-exceptional-functions

        Artifacts:
          Container: module.bc.zstd
          Kind: csvs-promoted
          SingleTargetFilename: module_abienforced.ll
          Docs: |-
            This artifact contains an LLVM function for each function in the
            input program.
            The functions no longer use global variables (CSVs) to communicate:
            each register is promoted to a local variable, an argument and/or a
            return value.

            This means that, for instance, a function using the SystemV ABI for
            x86-64 that has two `uint8_t` arguments, will have two 64-bits
            registers, not two 8-bits registers.
            This reflects the fact that in the considered ABI, two `uint8_t`
            arguments are passed on the `rdi` and `rsi` registers.

            The stack pointer is an exception: it's still used as a CSV.
            As a consequence, stack arguments are not promoted to actual
            arguments: they are accessed with pointer arithmetic w.r.t. the
            stack pointer CSV.
  - From: isolate
    Steps:
      - Name: emit-cfg
        Pipes: []
        Artifacts:
          Container: cfg.yml.tar.gz
          Kind: cfg
          SingleTargetFilename: cfg.yml.tar.gz
          Docs: |-
            This artifact is an archive containing one YAML file for each
            function.
            Each document contains information about the control-flow graph of
            each function.
  - From: isolate
    Steps:
      - Name: hexdump
        Pipes:
          - Type: hex-dump
            UsedContainers: [input, module.bc.zstd, cfg.yml.tar.gz, hex.dump]
        Artifacts:
          Container: hex.dump
          Kind: hex-dump
          SingleTargetFilename: hex_dump.hex
          Docs: |-
            This artifact contains a hex dump of each segment in the input
            binary.
  - From: isolate
    Steps:
      - Name: render-svg-call-graph
        Pipes:
          - Type: yield-call-graph
            UsedContainers: [cross-relations.yml, call-graph.svg.yml]
        Artifacts:
          Container: call-graph.svg.yml
          Kind: call-graph-svg
          SingleTargetFilename: call-graph.svg
          Docs: |-
            This artifact is an SVG representing the call graph of the input
            program.
  - From: isolate
    Steps:
      - Name: render-svg-call-graph-slice
        Pipes:
          - Type: yield-call-graph-slice
            UsedContainers: [cfg.yml.tar.gz, cross-relations.yml, call-graph-slice.svg.tar.gz]
        Artifacts:
          Container: call-graph-slice.svg.tar.gz
          Kind: call-graph-slice-svg
          SingleTargetFilename: call-graph-slice.svg
          Docs: |-
            This artifact is an archive of SVG files.
            Each file represents a subset of the call graph considering only the
            functions called/calling, directly or indirectly, the given function.
  - From: isolate
    Steps:
      - Name: process-assembly
        Pipes:
          - Type: process-assembly
            UsedContainers: [input, cfg.yml.tar.gz, assembly-internal.yml.tar.gz]
      - Name: disassemble
        Pipes:
          - Type: yield-assembly
            UsedContainers: [assembly-internal.yml.tar.gz, assembly.ptml.tar.gz]
        Artifacts:
          Container: assembly.ptml.tar.gz
          Kind: function-assembly-ptml
          SingleTargetFilename: disassembly.S
          Docs: |-
            This artifact is an archive of PTML files.
            Each file represents the disassembly of the given function.
  - From: process-assembly
    Steps:
      - Name: render-svg-cfg
        Pipes:
          - Type: yield-cfg
            UsedContainers: [assembly-internal.yml.tar.gz, cfg.svg.tar.gz]
        Artifacts:
          Container: cfg.svg.tar.gz
          Kind: function-control-flow-graph-svg
          SingleTargetFilename: cfg.svg
          Docs: |-
            This artifact is an archive of SVG files.
            Each file represents the CFG of the given function.
  - From: lift
    Steps:
      - Name: recompile
        Pipes:
          - Type: link-support
            UsedContainers: [module.bc.zstd]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes: [O2]
            EnabledWhen: [O2]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes: [drop-opaque-return-address]
          - Type: compile
            UsedContainers: [module.bc.zstd, object.o]
          - Type: link-for-translation
            UsedContainers: [input, object.o, output]
        Artifacts:
          Container: output
          Kind: translated
          SingleTargetFilename: translated-binary
          Docs: |-
            This artifact is translated version of the input binary.
            Specifically, it's an ELF executable for Linux x86-64 containing the
            `root` function plus the required runtime.
  - From: isolate
    Steps:
      - Name: recompile-isolated
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes: [invoke-isolated-functions]
          - Type: link-support
            UsedContainers: [module.bc.zstd]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes: [O2]
            EnabledWhen: [O2]
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes: [drop-opaque-return-address]
          - Type: compile-isolated
            UsedContainers: [module.bc.zstd, object.o]
          - Type: link-for-translation
            UsedContainers: [input, object.o, output]
        Artifacts:
          Container: output
          Kind: translated
          SingleTargetFilename: isolated-translated-binary
          Docs: |-
            This artifact is translated version of the input binary.
            Specifically, it's an ELF executable for Linux x86-64 containing the
            `root` function, all the isolated functions plus the required
            runtime.
  - From: enforce-abi
    Steps:
      - Name: remove-lifting-artifacts
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - dce
              - remove-lifting-artifacts
              - promote-init-csv-to-undef
      - Name: promote-stack-pointer
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - measure-stack-size-at-call-sites
              - promote-stack-pointer
      - Name: early-optimize
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - dce
              - remove-extractvalues
              - simplify-cfg-with-hoist-and-sink
              - dse
              - instcombine
              - remove-extractvalues
              - sroa
              - instsimplify
              - jump-threading
              - licm
              - unreachableblockelim
              - instcombine
              - remove-extractvalues
              - early-cse
              - simplify-cfg-with-hoist-and-sink
              - early-type-shrinking
              - type-shrinking
              - early-cse
              - instsimplify
              - gvn
              - instsimplify
              - dse
              - dce
              # In Outliner we inject some store of opaque values before calls
              # targeting the link register/top of the stack: the goal is make
              # sure the stores writing the return address are dead.
              # After the previous optimization pipeline, dead store elimination
              # should have removed such stores, therefore, we can now drop
              # those injected by us too.
              - drop-opaque-return-address
      - Name: simplify-switch
        Pipes:
          - Type: simplify-switch
            UsedContainers: [input, module.bc.zstd]
        Artifacts:
          Container: module.bc.zstd
          Kind: stack-pointer-promoted
          SingleTargetFilename: simplify-switch.ll
          Docs: |-
            This artifact contains an LLVM function for each function in the
            input program.
            The stack pointer has been promoted to a local variable and
            initialized with the result of an opaque function call.
      - Name: detect-stack-size
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - remove-stack-alignment
              - instrument-stack-accesses
              - instcombine
              - remove-extractvalues
              - loop-rotate
              - loop-simplify
              - compute-stack-accesses-bounds
        Analyses:
          - Name: detect-stack-size
            Type: detect-stack-size
            UsedContainers: [module.bc.zstd]
            Docs: |-
              This analysis, for each function, identifies the size of the stack
              frame and the amount of stack used to pass arguments.
      - Name: legacy-segregate-stack-accesses
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - hoist-struct-phis
              - legacy-segregate-stack-accesses
      - Name: legacy-late-optimize
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - cleanup-stack-size-markers
              - dce
              - sroa
              - instcombine
              - remove-extractvalues
              - sroa
              - simplify-cfg-with-hoist-and-sink
              # loop-rotate rearranges loops in a way that should make it
              # easier to match do-while loops
              - loop-rotate
              - loop-rewrite-with-canonical-induction-variable
              - simplify-cfg-with-hoist-and-sink
              # don't run simplify-cfg{,-with-hoist-and-sink} after
              # loop-simplify because it kills the loop-simplify form causing
              # DLA not to identify arrays properly
              - loop-simplify
              - instcombine
              - remove-extractvalues
              - early-cse
              - dce
              - strip-dead-prototypes
              - split-overflow-intrinsics
              - dce
      - Name: make-segment-ref
        Pipes:
          - Type: make-segment-ref
            UsedContainers: [input, module.bc.zstd]
        Artifacts:
          Container: module.bc.zstd
          Kind: stack-accesses-segregated
          SingleTargetFilename: legacy_stack_access_segregate.ll
          Docs: |-
            This artifact contains an LLVM function for each function in the
            input program.
            The functions have an argument for each argument in the input
            prototype.

            Unlike upstream artifacts, the arguments are not tied to the
            *register* containing them. So, if a function using the x86-64
            SystemV ABI has two `uint8_t` arguments, they will appear as two
            distinct arguments, as opposed to being merged in a single argument
            representing `rdi`.

            Additionally, this artifact correctly represent each stack argument
            in the function prototype.
        Analyses:
          - Name: analyze-data-layout
            Type: analyze-data-layout
            UsedContainers: [module.bc.zstd]
            Docs: |-
              This analysis inspects the memory accesses performed by the input
              program and detects the layout of data structures.
              The produced data structures are the result of merging the
              information obtained from each function interprocedurally.
      - Name: canonicalize
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - hoist-struct-phis
              - remove-llvmassume-calls
              - dce
              - remove-pointer-casts
              - make-model-gep
              - dce
              - twoscomplement-normalization
              - peephole-opt-for-decompilation
              - ternary-reduction
              - exit-ssa
              - make-local-variables
              - remove-load-store
              - fold-model-gep
              - dce
              - legacy-switch-to-statements
              - make-model-cast
              - implicit-model-cast
              - operatorprecedence-resolution
              - pretty-int-formatting
              - remove-broken-debug-information
      - Name: decompile
        Pipes:
          - Type: helpers-to-header
            UsedContainers: [module.bc.zstd, helpers.h]
          - Type: model-to-header
            UsedContainers: [input, types-and-globals.h]
          - Type: decompile
            UsedContainers: [module.bc.zstd, cfg.yml.tar.gz, decompiled.tar.gz]
        Artifacts:
          Container: decompiled.tar.gz
          Kind: decompiled
          SingleTargetFilename: decompiled.c
          Docs: |-
            This artifact is an archive of PTML file representing the C code of
            the program's functions.
        Analyses:
          - Name: import-from-c
            Type: import-from-c
            UsedContainers: []
            Docs: |-
              This analysis, given a snippet of C code representing an
              individual type, parses it and imports into the model, possibly
              replacing an existing type.
      - Name: decompile-to-single-file
        Pipes:
          - Type: decompile-to-single-file
            UsedContainers: [decompiled.tar.gz, decompiled.c]
        Artifacts:
          Container: decompiled.c
          Kind: decompiled-to-c
          SingleTargetFilename: binary_decompiled.c
          Docs: |-
            This artifact is a single PTML file representing the decompiled C
            code of the whole program, including the body of all of program's
            functions.
  - From: canonicalize
    Steps:
      - Name: emit-recompilable-archive
        Pipes:
          - Type: decompile-to-directory
            UsedContainers: [module.bc.zstd, cfg.yml.tar.gz, recompilable-archive.tar.gz]
        Artifacts:
          Container: recompilable-archive.tar.gz
          Kind: recompilable-archive
          SingleTargetFilename: recompilable-archive.tar.gz
          Docs: |-
            This artifact is an archive containing all the files necessary to
            recompile the decompiled C code of the input program.
            These files are not in PTML, they are plain C.

            It contains:

            - `functions.c`: the `decompile-to-single-file` artifact;
            - `types-and-globals.h`: see the `emit-model-header` artifact;
            - `helpers.h`: see the `emit-helpers-header` artifact;
            - `attributes.h`: an helper header file defining a set of
              annotations used by the decompiled C source files;
            - `primitive-types.h`: a header defining all the primitive types.
  - From: canonicalize
    Steps:
      - Name: emit-helpers-header
        Pipes:
          - Type: helpers-to-header
            UsedContainers: [module.bc.zstd, helpers.h]
        Artifacts:
          Container: helpers.h
          Kind: helpers-header
          SingleTargetFilename: helpers.h
          Docs: |-
            This artifact contains the declarations of all the helpers used
            the decompiled code.
  - From: initial
    Steps:
      - Name: emit-model-header
        Pipes:
          - Type: model-to-header
            UsedContainers: [input, types-and-globals.h]
        Artifacts:
          Container: types-and-globals.h
          Kind: model-header
          SingleTargetFilename: types-and-globals.h
          Docs: |-
            This artifact contains all the declaration of types, functions and
            segments defined in the binary.
  - From: canonicalize
    Steps:
      - Name: emit-type-definitions
        Pipes:
          - Type: generate-model-type-definition
            UsedContainers: [input, model-type-definitions.tar.gz]
        Artifacts:
          Container: model-type-definitions.tar.gz
          Kind: model-type-definition
          SingleTargetFilename: type.h
          Docs: |-
            This artifact is an archive of plain C headers.
            Each file contains the declaration of a type defined for this
            binary.
            This artifact is designed to be used as the initial input of the
            `import-from-c` analysis. In fact, this artifact is designed to be
            easily editable by the end-user; it's not designed to represent
            valid C code, unlike the `emit-model-header` artifact.
  - From: make-segment-ref
    Steps:
      - Name: cleanup-ir
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - instcombine
              - cleanup-ir
              - dce
        Artifacts:
          Container: module.bc.zstd
          Kind: stack-accesses-segregated
          SingleTargetFilename: cleanup-ir.ll
          Docs: |-
            This artifact contains one LLVM function for each function defined
            in this binary.

            The output is similar to the output of `make-segment-ref` but it's
            cleaned up from rev.ng-specific artifacts in order to be more easily
            consumed as standard LLVM IR.

            This is an appropriate artifact on top of which write analyses, such
            as a taint analysis.
    # Clift-based decompilation pipeline
    # TODO: this is still under construction and can't generate C code yet
  - From: detect-stack-size
    Steps:
      - Name: segregate-stack-accesses
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - hoist-struct-phis
              - segregate-stack-accesses
      - Name: late-optimize
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - cleanup-stack-size-markers
              - dce
              - sroa
              - instcombine
              - remove-extractvalues
              - sroa
              - simplify-cfg-with-hoist-and-sink
              # loop-rotate rearranges loops in a way that should make it
              # easier to match do-while loops
              - loop-rotate
              - loop-rewrite-with-canonical-induction-variable
              - simplify-cfg-with-hoist-and-sink
              # don't run simplify-cfg{,-with-hoist-and-sink} after
              # loop-simplify because it kills the loop-simplify form causing
              # DLA not to identify arrays properly
              - loop-simplify
              - instcombine
              - remove-extractvalues
              - early-cse
              - dce
              - strip-dead-prototypes
              - split-overflow-intrinsics
              - dce
      - Name: prepare-for-clift
        Pipes:
          - Type: llvm-pipe
            UsedContainers: [module.bc.zstd]
            Passes:
              - remove-llvmassume-calls
              - dce
              - exit-ssa
              - switch-to-statements
        Artifacts:
          Container: module.bc.zstd
          Kind: stack-accesses-segregated
          SingleTargetFilename: prepare_for_clift.ll
          Docs: |-
            This artifact contains an LLVM function for each function in the
            input program.

            The output is similar to the output of `make-segment-ref` but it now
            contains explicit Alloca/Load/Store instructions.
            These are injected as a preliminary step for moving away from LLVM
            towards a higher-level representation that can be emitted in C.
      - Name: import-clift-types
        Pipes:
          - Type: import-clift-types
            UsedContainers: [cfg.yml.tar.gz, module.mlir]
        Artifacts:
          Container: module.mlir
          Kind: mlir-module
          SingleTargetFilename: mlir-llvm-dialect-with-clift-types.mlir
          Docs: |-
            A test artifact to import types into a Clift module.
AnalysesLists:
  - Name: revng-initial-auto-analysis
    Analyses:
      - import-binary
      - import-well-known-models
      - detect-abi
      - detect-stack-size
      - analyze-data-layout
      - convert-functions-to-cabi
